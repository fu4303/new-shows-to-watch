<!DOCTYPE html>
<html lang="en" dir="ltr">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta http-equiv="X-UA-Compatible" content="ie=edge">
        <meta name="description" content="What to Watch, a collection of TV shows and series on popular streaming services.">
        <title>{{ title }}</title>
        <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon.png">
        <link rel="icon" type="image/png" sizes="32x32" href="/images/favicon-32x32.png">
        <link rel="icon" type="image/png" sizes="16x16" href="/images/favicon-16x16.png">
        <link rel="stylesheet" href="/css/style.css">
    </head>
    <body>
        <header class="main-nav">
            <nav>
                <a class="home-btn" href="/">Home</a>
                <ul class="nav-list">
                    <li><a href="/categories/">Categories</a></li>
                    <li><a href="/search/">Search</a></li>
                    <li><a href="https://github.com/tannerdolby/what-to-watch/blob/master/CONTRIBUTING.md">Contribute</a></li>
                </ul>
            </nav>
        </header>
        <div class="welcome-block">
            <h1 style="margin-top: 3rem;">What to Watch</h1>
            <div class="welcome-intro">
                <h2>Need a new show?</h2>
                <p>You've come to the right place. Have a look at the collection of series below. Enjoy!</p>
            </div>
        </div>
        <main>
            <h2 class="collection-heading">Search the Collection</h2>
            <label for="search-bar" class="sr-only">Search Site</label>
            <input type="text" name="search" id="search-bar" placeholder="Search...">
            <p id="log" class="sr-only" aria-hidden="true"></p>
            <div class="shows-collection">
        {% for show in collections.shows | reverse %}
            <article class="show" data-show-title="{{ show.data.title }}">
                <h2>{{ show.data.title }}</h2>
                <p style="margin-bottom: .5rem;"><em>Created {{ show.data.dateStr }}</em></p>
                <div class="series-data" style="display: flex; justify-content: space-between;">
                    <p>Seasons: {{ show.data.seasons }}</p>
                    <p>Episodes: {{ show.data.episodes }}</p>
                </div>
                <ul style="padding-left: 1.5rem;">
                    <li>Episode length: {{ show.data.runtime }}</li>
                    <li>Streaming on {{ show.data.streamingService }}</li>
                </ul>
                <p><a class="link-to-wiki" href="{{ show.data.url }}">Read more &RightArrow;</a></p>
                <h3>Genres</h3>
                <ul class="genre">
                {% for genre in show.data.tags %}
                    <li><a href="/categories#{{ genre | slug }}">{{ genre | cleanup }}</a></li>
                {% endfor %}
                </ul>
            </article>
        {% endfor %}
            </div>
        </main>
        <footer>
            <nav>
                <ul>
                    <li><a href="/">Home</a></li>
                    <li><a href="https://github.com/tannerdolby/what-to-watch#readme">About</a></li>
                    <li><a href="https://github.com/tannerdolby/what-to-watch/blob/master/CONTRIBUTING.md">Contribute</a></li>
                    <li><a href="https://github.com/tannerdolby/what-to-watch/blob/master/{{ page.inputPath }}/">Edit this page on Github</a></li>
                </ul>
            </nav>
            &copy; 2020 Tanner Dolby. Built with Eleventy and contributions! 
        </footer>
        <script>
            const shows = [...document.getElementsByClassName("show")];
            const searchBar = document.getElementById("search-bar");
            const log = document.getElementById("log");

            /**
            * Returns the text entered into an input search bar and injects it into an HTML element.
            * @param {Event} e The `input` event to capturecharacters entered into input field.
            * @retun {String} The text content injected into whatever element you choose.
            */
            function capture(e, element) {
                return element.textContent = e.target.value;
            }

            searchBar.addEventListener("input", (e) => {
                // Grab blog posts on document and convert HTMLCollection to an Array with the spread operator
                const shows = [...document.getElementsByClassName("show")];

                // inject user input to HTMLElement to add into search query
                capture(e, log);

                var searchQuery = [];
                searchQuery.push(log.innerHTML.toLowerCase());

                // posts with title that matches each character in search query
                const matchingShow = shows.filter((show) => {
                    return show.dataset.showTitle.toLowerCase().includes(searchQuery);
                });

                // posts with title that does not match the search query
                const nonMatchingShow = shows.filter((show) => {
                    return show.dataset.showTitle.toLowerCase().includes(searchQuery) === false;
                });
                
                // If there is a matching post then hide non-matching posts
                // else if a non matching (previously hidden) post still has sr-only, remove it
                if (matchingShow) {
                    nonMatchingShow.forEach(show => show.classList.add("sr-only"));
                } else {
                    nonMatchingShow.forEach(show => show.classList.remove("sr-only"));
                }

                // If the matching post is hidden from a previous query and matches search query, show it
                matchingShow.forEach(show => {
                    if (show.classList.value.includes("sr-only")) {
                        show.classList.remove("sr-only");
                    }
                });
            });
        </script>
    </body>
</html>